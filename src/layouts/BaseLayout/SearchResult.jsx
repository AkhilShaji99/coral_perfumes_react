import { useNavigate } from "react-router-dom";
import deviceImageRender from "../../utils/deviceImageRender";
import { Link } from "react-router-dom";
function SearchResult({ setResult, result, setQuery, query }) {
  const navigate = useNavigate();
  const closeModal = () => {
    // setResults([])
    setResult([]);
  };

  function highlightSearchTerm(title, query) {
    // Use JavaScript's replace method to replace the search term with a span
    const highlightedTitle = title.replace(
      new RegExp(query, "g"),
      (match) => `${'<span class="color-txt">' + query + "</span>"}`
    );
    return highlightedTitle;
  }

  return (
    <>
      {result ? (
        <div class="row search-container">
          {/* {result.top_blocks && result.top_blocks.length > 0 ? (
            <a href="javascript:;" className="search-result-close">
              X
            </a>
          ) : null} */}
          <div class="row search-top">
            {result?.top_blocks?.map((block, index) => (
              <div
                className="col-auto search-tag"
                onClick={() => {
                  closeModal();
                  navigate("/" + block.link);
                  setQuery(block.title);
                  localStorage.setItem("link_items", block?.link_items);
                  // setQuery(result);
                }}
              >
                <svg
                  width={7}
                  height={11}
                  viewBox="0 0 7 11"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g clipPath="url(#clip0_862_23376)">
                    <path
                      d="M3.75285 0.510671L3.76395 0.540313L3.74591 0.636353C3.69361 0.933772 3.59564 1.224 3.45453 1.49953C3.30229 1.79833 3.12467 2.08722 2.92312 2.36388C2.73113 2.63197 2.52271 2.8912 2.29874 3.1405C2.29874 3.1405 2.29874 3.14643 2.29874 3.14762C2.2141 3.23773 2.12668 3.3314 2.03788 3.42151L1.87832 3.58276L1.72569 3.7369C1.49259 3.97403 1.29556 4.1922 1.1249 4.39495C0.754067 4.82066 0.459028 5.29094 0.249379 5.79049C0.0397568 6.32193 -0.0400516 6.88447 0.0148899 7.44333C0.0364478 7.69447 0.0781714 7.94405 0.139766 8.1903C0.196553 8.41501 0.278325 8.63456 0.383968 8.84598C0.587377 9.25249 0.908775 9.60794 1.31776 9.87871C1.54684 10.0275 1.79494 10.1536 2.05731 10.2546C2.20412 10.3124 2.35578 10.3607 2.51102 10.3992C2.6677 10.4366 2.82786 10.4624 2.98972 10.4763C3.09979 10.4873 3.21051 10.4928 3.32133 10.4929C3.53533 10.4914 3.74881 10.4747 3.95959 10.4431C4.28388 10.3926 4.59978 10.3086 4.90032 10.1929C5.19806 10.0808 5.48011 9.94036 5.74115 9.77437C5.9902 9.61984 6.21619 9.43986 6.4141 9.23844C6.50365 9.14819 6.58571 9.05271 6.65969 8.95269C6.72637 8.8591 6.78436 8.76117 6.83313 8.65983C6.92357 8.47073 6.97881 8.27069 6.99685 8.06699C7.01412 7.86636 7.00059 7.66467 6.95661 7.46704C6.91338 7.2646 6.84788 7.06611 6.76098 6.8742C6.56656 6.45773 6.32637 6.05795 6.04363 5.68022C5.87991 5.45139 5.70508 5.22255 5.5358 5.00083C5.41648 4.84551 5.29715 4.689 5.1806 4.52656C4.92797 4.19988 4.70708 3.85607 4.52014 3.49858C4.46648 3.38947 4.42015 3.27784 4.38139 3.16422C4.31858 2.95887 4.27222 2.7501 4.24264 2.53936C4.23015 2.45992 4.21905 2.37811 4.20934 2.2963L4.16216 2.13268C4.11915 1.89554 4.08169 1.65841 4.03451 1.42127C3.99705 1.23749 3.95265 1.05371 3.89576 0.873488C3.86524 0.782191 3.83055 0.689708 3.7917 0.599597C3.78199 0.566398 3.76672 0.533199 3.74591 0.5C3.74524 0.503534 3.74524 0.507137 3.74591 0.510671"
                      fill="#F55308"
                    />
                    <path
                      d="M3.11475 3.89223C3.04538 4.00369 2.98433 4.11632 2.92605 4.23134C2.7873 4.52064 2.67214 4.82417 2.55004 5.11466C2.43802 5.40057 2.29881 5.67815 2.13378 5.94464C2.13056 5.94925 2.12581 5.95295 2.12013 5.95526C2.11445 5.95758 2.1081 5.95841 2.10188 5.95765C2.09565 5.95689 2.08982 5.95457 2.08513 5.95099C2.08044 5.94741 2.07709 5.94273 2.07551 5.93752C2.06644 5.90837 2.05484 5.87984 2.04082 5.85216C2.04142 5.8545 2.04142 5.85693 2.04082 5.85927C1.98927 5.76501 1.93184 5.67319 1.86877 5.58419C1.82657 5.52158 1.79038 5.45616 1.76054 5.38856C1.69002 5.47443 1.62651 5.56436 1.57045 5.6577C1.49136 5.78694 1.4206 5.91974 1.354 6.05491V6.04779C1.18472 6.39164 1.04181 6.74379 0.908609 7.09712C0.848946 7.25363 0.792058 7.41014 0.73517 7.57139C0.72407 7.60577 0.711582 7.63897 0.699095 7.67336C0.686607 7.70774 0.669957 7.7528 0.658857 7.79192C0.630999 7.87914 0.610138 7.96787 0.596419 8.05752C0.582074 8.15228 0.574659 8.24771 0.574219 8.34326C0.575349 8.43328 0.582762 8.52315 0.596419 8.61241V8.6053C0.612591 8.70364 0.635759 8.80104 0.665795 8.89698C0.697947 8.99165 0.736398 9.08468 0.780958 9.17561C0.830698 9.27326 0.887224 9.36828 0.950235 9.46017C1.0179 9.55178 1.09156 9.64005 1.17085 9.72458C1.22219 9.7803 1.27491 9.83485 1.3318 9.8882C1.55562 10.0322 1.79763 10.1543 2.05331 10.2522C2.2001 10.3104 2.35176 10.3591 2.50702 10.398C2.66435 10.4351 2.82489 10.4612 2.9871 10.4763C3.09726 10.4863 3.20794 10.4915 3.31872 10.4917C3.53271 10.4901 3.74618 10.4735 3.95697 10.4419C4.28162 10.3911 4.59793 10.3071 4.8991 10.1917C5.19683 10.0791 5.47887 9.9383 5.73993 9.772C5.98895 9.61745 6.21494 9.43748 6.41287 9.23608C6.5028 9.14705 6.58533 9.05276 6.65985 8.95389C6.66945 8.94167 6.67825 8.929 6.68621 8.91595C6.68621 8.9029 6.68621 8.89105 6.69315 8.878C6.70009 8.86496 6.69315 8.878 6.69315 8.88512C6.70705 8.79629 6.714 8.70677 6.71396 8.61716C6.71301 8.53509 6.70653 8.45314 6.69454 8.37172V8.36461C6.67805 8.25999 6.65254 8.15655 6.61822 8.05514C6.58414 7.95351 6.5429 7.85373 6.49473 7.75635C6.2976 7.38164 6.04485 7.03016 5.7427 6.71059C5.34171 6.26833 4.89771 5.85571 4.48423 5.42294C4.34548 5.27592 4.20673 5.12652 4.07491 4.97238C3.94743 4.8243 3.82888 4.67075 3.71971 4.51234C3.61563 4.36671 3.52472 4.2145 3.44776 4.05704C3.38475 3.91947 3.33599 3.77743 3.30207 3.63257C3.23408 3.71912 3.17164 3.80805 3.11475 3.89816M2.93021 4.23015C2.93096 4.23207 2.93096 4.23415 2.93021 4.23608C2.93021 4.23608 2.93021 4.23608 2.93021 4.23015Z"
                      fill="#F8781F"
                    />
                    <path
                      d="M3.45339 6.05135H3.46866C3.43731 6.05477 3.40626 6.05992 3.37569 6.06676C3.34745 6.07382 3.31966 6.08213 3.29244 6.09166C3.26747 6.10233 3.24249 6.11182 3.2189 6.12368C3.19648 6.13441 3.17514 6.1467 3.15508 6.16043C3.10909 6.19162 3.06721 6.22701 3.0302 6.26596C2.94773 6.36563 2.87796 6.47256 2.82208 6.5849C2.76238 6.70389 2.69138 6.81849 2.60979 6.92757C2.55641 6.99412 2.49502 7.05571 2.42663 7.11135C2.36095 7.16358 2.29193 7.21266 2.21989 7.25837C2.08114 7.34848 1.92435 7.42792 1.78283 7.5204C1.71335 7.56556 1.65005 7.61727 1.59413 7.67454C1.52563 7.75174 1.46832 7.83575 1.42346 7.92472V7.93183C1.39466 7.99125 1.37055 8.05225 1.35131 8.11443C1.33331 8.17455 1.31941 8.23552 1.30969 8.29702C1.28609 8.46161 1.28609 8.62805 1.30969 8.79264C1.34626 9.0162 1.41718 9.23466 1.52059 9.44239C1.52059 9.44239 1.52059 9.44239 1.52059 9.43646C1.62561 9.65142 1.76273 9.85387 1.92852 10.0388C2.00994 10.1303 2.09947 10.2163 2.19631 10.2961C2.30185 10.3333 2.40979 10.3654 2.5196 10.3921C2.67717 10.4299 2.83825 10.4561 3.00106 10.4704C3.11116 10.4811 3.22187 10.4867 3.33268 10.487C3.54666 10.4853 3.76013 10.4686 3.97094 10.4372C4.29606 10.3859 4.61282 10.3015 4.91444 10.1858C5.1829 10.0845 5.43859 9.9602 5.67758 9.81469C5.68034 9.81047 5.6836 9.8065 5.68729 9.80283C5.72464 9.74631 5.75845 9.68813 5.78858 9.62854C5.82168 9.56143 5.8495 9.49251 5.87183 9.42223C5.89294 9.35197 5.90915 9.28071 5.92039 9.20881C5.93335 9.12311 5.93938 9.03674 5.93843 8.95033C5.93655 8.86231 5.92914 8.77445 5.91623 8.68711C5.8738 8.43665 5.79359 8.19195 5.67758 7.9591C5.58092 7.76703 5.46727 7.58153 5.33764 7.40421C5.20998 7.2311 5.07123 7.06313 4.92138 6.90029C4.81117 6.77661 4.69353 6.65788 4.56895 6.54459C4.4557 6.43992 4.33324 6.34281 4.20265 6.2541C4.09729 6.18282 3.98221 6.12271 3.85993 6.07506C3.79018 6.04851 3.71637 6.03055 3.64071 6.02171H3.64903C3.62317 6.01994 3.59719 6.01994 3.57133 6.02171C3.53463 6.02168 3.49799 6.02405 3.46172 6.02882"
                      fill="#FAA032"
                    />
                    <path
                      d="M2.9439 8.95863H2.95222C2.86517 8.96863 2.77989 8.98774 2.69831 9.01555H2.70525C2.65068 9.03524 2.599 9.06031 2.55123 9.09024C2.50907 9.11798 2.4713 9.15026 2.43884 9.18628C2.40796 9.22306 2.38234 9.26287 2.36253 9.30485C2.33941 9.35273 2.32356 9.40293 2.31536 9.45425C2.30634 9.52082 2.30634 9.58806 2.31536 9.65463C2.3321 9.7526 2.36382 9.84827 2.40971 9.93919C2.4091 9.93685 2.4091 9.93442 2.40971 9.93208C2.46972 10.0407 2.54572 10.1423 2.63587 10.2344C2.71737 10.3223 2.81048 10.4019 2.91337 10.4716L2.99246 10.481C3.1104 10.4905 3.22279 10.4965 3.32546 10.4965C3.53948 10.4952 3.75299 10.4786 3.96372 10.4467C4.28879 10.3952 4.60552 10.3108 4.90723 10.1953C5.03072 10.1491 5.15282 10.0969 5.27214 10.04C5.21652 9.96204 5.15583 9.88683 5.09038 9.81469C5.01653 9.73456 4.93731 9.65815 4.85312 9.58586C4.76929 9.51751 4.68129 9.453 4.58949 9.39259C4.50396 9.33662 4.41453 9.28515 4.3217 9.23845C4.22546 9.18983 4.12583 9.14628 4.02338 9.10803C3.92408 9.07257 3.8221 9.04286 3.71813 9.0191C3.61157 8.99405 3.50307 8.97543 3.39345 8.96338H3.40178C3.31354 8.9525 3.22452 8.94695 3.13538 8.94678C3.07181 8.94679 3.00831 8.95036 2.94529 8.95745"
                      fill="#FBB45E"
                    />
                  </g>
                  <defs>
                    <clipPath id="clip0_862_23376">
                      <rect
                        width={7}
                        height={10}
                        fill="white"
                        transform="translate(0 0.5)"
                      />
                    </clipPath>
                  </defs>
                </svg>{" "}
                &nbsp;
                {block.title}
              </div>
            ))}
          </div>
          <div class="col-lg-6 col-12 mb-4 mb-lg-0">
            {result.data?.length > 0 && (
              <div className="col-md-10 col-10" style={{ display: "block" }}>
                <h5 className="pt-4 font-weight-bold">SUGGESTIONS</h5>
                {result?.data?.map((resultData, index) => (
                  <div class="row py-2">
                    <div class="col-8 search-product">
                      <a
                        key={index}
                        className="col-12 link-dark"
                        onClick={() => {
                          closeModal();
                          navigate("/" + resultData.link);
                          setQuery(resultData.title);
                          // setQuery(result);
                        }}
                      >
                        {/* {result.title} */}
                        <div>
                          <p>{resultData.title}</p>
                        </div>
                        {/* <div
                          className="p-d-c"
                          dangerouslySetInnerHTML={{
                            __html: result.title.replace(
                              new RegExp(query, "g"),
                              <span className="active">{query}</span>
                            ),
                          }}
                        /> */}
                      </a>
                    </div>
                    <div class="col text-right">
                      <h6 className="text-right">{resultData.count}</h6>
                    </div>
                  </div>
                ))}
              </div>
            )}

            <span
              to={""}
              onClick={() => {
                closeModal();
                navigate(
                  "/" +
                    result?.see_all_item?.link +
                    "/" +
                    Math.random().toString(36).slice(2, 7)
                );
                localStorage.setItem(
                  "link_items",
                  result?.see_all_item?.link_items
                );
              }}
              className="mt-3"
            >
              <u>{result?.see_all_item?.title}</u>
            </span>
          </div>
          <div class="col best-scroll">
            {result.products?.length > 0 && (
              <div className="" style={{ display: "block" }}>
                <h5 className="pt-4">PRODUCTS</h5>
                {result?.products?.map((product, index) => (
                  <div
                    className="row align-items-center py-2 g-sm-2 g-lg-15 "
                    key={index}
                    onClick={() => {
                      closeModal();
                      navigate(`/product/${product?.slug}`);
                      setQuery(product.name);
                      // setQuery(result);
                    }}
                  >
                    <div className="col-3 col-md-3 col-lg-3">
                      <div className="d-flex mini-cart-img">
                        <img
                          src={deviceImageRender(
                            product?.product_listing_image
                          )}
                          alt="Ecommerce"
                          className="icon-shape icon-xxl"
                        />
                      </div>
                    </div>
                    <div className="hd-left col-9 col-md-9 col-lg-9">
                      <h4 className=" mb-3">{product?.name}</h4>
                      <div className="row mb-3">
                        <div className="col-md-6 price-minicart">
                          aed {product?.price_amount}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      ) : null}
    </>
  );
}
export default SearchResult;
